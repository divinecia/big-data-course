# We are going to learn Python data structures:
    *String
    *List
    *Tupples
    *Sets
    *Dictionaries
    *Graphs(line graphs, histograms, pie charts, scatter plots, bar charts, box and whisker plots, dot plots, and area graphs, steam leaf)

PART 1:
Let's explore Python data structures and visualization techniques through practical Jupyter Notebook examples. Below are key concepts with executable code snippets and explanations:

## Core Data Structures
**Strings**  
Immutable sequences of Unicode characters:
```python
text = "Hello, World!"
print(text[7:12])  # Slicing returns 'World' [1]
```

**Lists**  
Mutable ordered collections:
```python
numbers = [1, 2, 3]
numbers.append(4)
print(numbers[::-1])  # Reverses list [2][3]
```

**Tuples**  
Immutable ordered sequences:
```python
coordinates = (40.7128, -74.0060)
# coordinates[0] = 41.8781 would raise error [1]
print(list(coordinates))  # Convert to list [1]
```

**Sets**  
Unique element collections:
```python
unique_nums = {1, 2, 2, 3}
print(unique_nums)  # Outputs {1, 2, 3} [3]
```

**Dictionaries**  
Key-value mappings:
```python
student = {'name': 'Alice', 'age': 21}
print(student.get('grade', 'N/A'))  # Safe lookup [3]
```

| Structure  | Ordered | Mutable | Duplicates | Use Case               |
|------------|---------|---------|------------|------------------------|
| List       | Yes     | Yes     | Yes        | Dynamic collections    |
| Tuple      | Yes     | No      | Yes        | Fixed data records     |
| Dictionary | No      | Yes     | Keys: No   | Key-value relationships|
| Set        | No      | Yes     | No         | Unique elements        | [3]

## Data Visualization
**Line Graphs**  
Plot trends over time:
```python
import matplotlib.pyplot as plt
x = [1, 2, 3, 4]
y = [1, 4, 9, 16]
plt.plot(x, y, marker='o')
plt.title("Quadratic Growth")
plt.show()
```

**Histograms**  
Display data distribution:
```python
data = [1, 2, 2, 3, 3, 3, 4, 4, 5]
plt.hist(data, bins=5, edgecolor='black')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.show()
```

**Pie Charts**  
Show proportional composition:
```python
sizes = [25, 35, 20, 20]
labels = ['A', 'B', 'C', 'D']
plt.pie(sizes, labels=labels, autopct='%1.1f%%', explode=(0,0.1,0,0))
plt.title("Category Distribution")
plt.show()
```

**Scatter Plots**  
Visualize relationships:
```python
x = [5,7,8,7,2,17]
y = [99,86,87,88,111,86]
plt.scatter(x, y)
plt.xlabel('X Values')
plt.ylabel('Y Values')
plt.show()
```

**Bar Charts**  
Compare categorical data:
```python
categories = ['A', 'B', 'C']
values = [12, 15, 9]
plt.bar(categories, values, color=['skyblue', 'salmon', 'lightgreen'])
plt.title("Category Comparison")
plt.show()
```
PART 2: 
Here are practical Python data structure and visualization questions organized by concept, with solutions drawn from expert resources:

## Core Data Structure Exercises
**List Manipulation**  
1. Remove duplicates from a list using sets  
```python
original = [1, 2, 2, 3]  
unique = list(set(original))  # [1][2]
```

2. Reverse a list using slicing  
```python
nums = [1, 2, 3, 4]  
reversed = nums[::-1]  # [1][3]
```

**Tuple Operations**  
3. Convert tuple to list and vice versa  
```python
tup = (1, 2, 3)  
lst = list(tup)  # [1][8]  
new_tup = tuple(lst)
```

**Dictionary Challenges**  
4. Access nested dictionary values  
```python
emp = {"company": {"employee": {"name": "Jess"}}}  
print(emp["company"]["employee"]["name"])  # [2][3]
```

**Set Applications**  
5. Find common elements between two sets  
```python
set_a = {1, 2, 3}  
set_b = {2, 3, 4}  
common = set_a & set_b  # [3][8]
```

## Advanced Structure Problems
6. Matrix transposition using list comprehension  
```python
matrix = [[1,2],[3,4]]  
transposed = [[row[i] for row in matrix] for i in range(2)]  # [1][5]
```

7. Flatten nested lists  
```python
nested = [[1,2],[3,[4,5]]]  
flat = [num for sub in nested for num in (sub if isinstance(sub, list) else [sub])]  # [1][5]
```

## Visualization Exercises
**Basic Plots**  
8. Create a line plot with markers  
```python
import matplotlib.pyplot as plt  
plt.plot([1,2,3], [1,4,9], marker='o')  
plt.title("Quadratic Growth")  # [4][9]
```

**Data Distribution**  
9. Generate histogram with custom bins  
```python
data = [1,2,2,3,3,3,4]  
plt.hist(data, bins=4, edgecolor='black')  # [4][9]
```

**Comparative Visualization**  
10. Side-by-side bar chart  
```python
categories = ['A', 'B']  
values1 = [12, 15]  
values2 = [14, 13]  
plt.bar([x-0.2 for x in range(2)], values1, width=0.4)  
plt.bar([x+0.2 for x in range(2)], values2, width=0.4)  # [4][12]
```

## Advanced Challenges
11. 3D surface plot (requires mpl_toolkits)  
```python
from mpl_toolkits.mplot3d import Axes3D  
fig = plt.figure()  
ax = fig.add_subplot(111, projection='3d')  
X = np.arange(-5, 5, 0.25)  
Y = np.arange(-5, 5, 0.25)  
X, Y = np.meshgrid(X, Y)  
R = np.sqrt(X**2 + Y**2)  
Z = np.sin(R)  
ax.plot_surface(X, Y, Z)  # [12]
```

12. Interactive plot with Plotly  
```python
import plotly.express as px  
fig = px.scatter(x=[1,2,3], y=[3,1,6], size=[10,20,30])  
fig.show()  # [4][12]
```


Python Data Structures and Visualization Exam
Section 1: Core Data Structures (30 points)
Question 1 (5 points)
Write a Python function that takes a list of integers and returns a new list containing only the even numbers from the original list.
Python
def filter_even_numbers(numbers):
    # Your code here
Question 2 (5 points)
Given a tuple of strings, write a function that returns a dictionary where the keys are the strings and the values are their lengths.
python
def tuple_to_dict(tup):
    # Your code here
Question 3 (5 points)
Create a set from a list of integers and demonstrate how to find the union and intersection with another set.
Python
def set_operations(list1, list2):
    # Your code here
Question 4 (5 points)
Write a function that merges two dictionaries. If there are duplicate keys, sum their values.
python
def merge_dicts(dict1, dict2):
    # Your code here
Question 5 (10 points)
You have a list of tuples where each tuple contains a student's name and their score. Write a function that returns the name of the student with the highest score.
python
def top_student(students):
    # Your code here
Section 2: Data Visualization (30 points)
Question 6 (10 points)
Using Matplotlib, create a bar chart displaying five product sales data. The products and their sales are: ['Product A', 'Product B', 'Product C', 'Product D', 'Product E'] with sales [150, 200, 300, 250, 100].
Python
import matplotlib.pyplot as plt

def plot_sales():
    # Your code here
Question 7 (10 points)
Create a histogram using Matplotlib to display the distribution of ages in the following list: [22, 25, 25, 30, 32, 35, 30, 29, 40, 45, 50]. Use appropriate bin sizes.
python
def plot_age_distribution():
    # Your code here
Question 8 (10 points)
Use Seaborn or Matplotlib to create a scatter plot showing the relationship between two variables: x = [1, 2, 3, 4] and y = [10, 20, 25, 30]. Include labels for axes and a title.
python
import seaborn as sns

def plot_scatter():
    # Your code here
Section 3: Advanced Challenges (40 points)
Question 9 (20 points)
Write a function that takes in a nested list and flattens it into a single list. For example, given [[1,2],[3,[4,5]]], it should return [1,2,3,4,5].
python
def flatten(nested_list):
    # Your code here
Question 10 (20 points)
Create a pie chart using Matplotlib that represents the market share of four companies: ['Company A', 'Company B', 'Company C', 'Company D'] with shares [15, 30, 45, 10]. Include percentages in the chart.
python
def plot_market_share():
    # Your code here

Total Points: 100
Instructions:
Each question is worth specified points; ensure you provide complete solutions.
Use comments to explain your logic where necessary.
You may use any libraries required for visualization.
Submit your Jupyter Notebook containing all solutions with clear outputs.
Good luck!
